package filter

import (
	"fmt"
	"math"
	"math/cmplx"
	"math/rand"
	"reflect"
	"sort"
	"testing"

	"github.com/google-research/korvapuusti/tools/synthesize/signals"
	"github.com/mjibson/go-dsp/fft"
)

type combinationSlice [][]int

func (c combinationSlice) Len() int {
	return len(c)
}

func (c combinationSlice) Less(i, j int) bool {
	sort.Sort(sort.IntSlice(c[i]))
	sort.Sort(sort.IntSlice(c[j]))
	return c[i][0] < c[j][0]
}

func (c combinationSlice) Swap(i, j int) {
	c[i], c[j] = c[j], c[i]
}

func checkEq(a, b [][]int) error {
	sort.Sort(combinationSlice(a))
	sort.Sort(combinationSlice(b))
	if len(a) != len(b) {
		return fmt.Errorf("lengths: %v != %v", len(a), len(b))
	}
	for i := range a {
		if len(a[i]) != len(b[i]) {
			return fmt.Errorf("length of elements %+v/%+v: %v != %v", a[i], b[i], len(a[i]), len(b[i]))
		}
		for j := range a[i] {
			if a[i][j] != b[i][j] {
				return fmt.Errorf("elements %+v/%+v: %v != %v", a[i], b[i], a[i][j], b[i][j])
			}
		}
	}
	return nil
}

func TestMemory(t *testing.T) {
	lti, err := LTIConf{
		Poles: []complex128{0, 0, 0, 0},
		Zeros: []complex128{0, 0, 0},
	}.Make()
	if err != nil {
		t.Fatal(err)
	}
	for i := 0; i < 4; i++ {
		lti.Preload(complex(float64(i), 0), complex(0, float64(i)))
	}
	for i := 0; i < 4; i++ {
		if lti.getX(i-4) != complex(float64(i), 0) {
			t.Errorf("got %v, wanted %v", lti.getX(i-4), complex(float64(i), 0))
		}
		if lti.getY(i-4) != complex(0, float64(i)) {
			t.Errorf("got %v, wanted %v", lti.getY(i-4), complex(0, float64(i)))
		}
	}

	lti, err = LTIConf{
		Poles: []complex128{0, 0, 0, 0},
		Zeros: []complex128{0, 0, 0},
	}.Make()
	if err != nil {
		t.Fatal(err)
	}
	for _, tc := range []struct {
		xBefore []complex128
		xPush   complex128
		yBefore []complex128
		yPush   complex128
	}{
		{
			xBefore: []complex128{0, 0, 0, 0},
			xPush:   complex(1, 0),
			yBefore: []complex128{0, 0, 0},
			yPush:   complex(0, 1),
		},
		{
			xBefore: []complex128{complex(1, 0), 0, 0, 0},
			xPush:   complex(2, 0),
			yBefore: []complex128{complex(0, 1), 0, 0},
			yPush:   complex(0, 2),
		},
		{
			xBefore: []complex128{complex(2, 0), complex(1, 0), 0, 0},
			xPush:   complex(3, 0),
			yBefore: []complex128{complex(0, 2), complex(0, 1), 0},
			yPush:   complex(0, 3),
		},
		{
			xBefore: []complex128{complex(3, 0), complex(2, 0), complex(1, 0), 0},
			xPush:   complex(4, 0),
			yBefore: []complex128{complex(0, 3), complex(0, 2), complex(0, 1)},
			yPush:   complex(0, 4),
		},
		{
			xBefore: []complex128{complex(4, 0), complex(3, 0), complex(2, 0), complex(1, 0)},
			xPush:   complex(5, 0),
			yBefore: []complex128{complex(0, 4), complex(0, 3), complex(0, 2)},
			yPush:   complex(0, 5),
		},
		{
			xBefore: []complex128{complex(5, 0), complex(4, 0), complex(3, 0), complex(2, 0)},
			xPush:   complex(6, 0),
			yBefore: []complex128{complex(0, 5), complex(0, 4), complex(0, 3)},
			yPush:   complex(0, 6),
		},
	} {
		for i, want := range tc.xBefore {
			if got := lti.getX(-i); got != want {
				t.Errorf("got x[-%v] %v, wanted %v", i, got, want)
			}
		}
		for i, want := range tc.yBefore {
			if got := lti.getY(-i); got != want {
				t.Errorf("got y[-%v] %v, wanted %v", i, got, want)
			}
		}
		lti.incHist()
		lti.setX(tc.xPush)
		lti.setY(tc.yPush)
	}

}

func TestGoldenSequence(t *testing.T) {
	lti, err := LTIConf{
		Gain:  1,
		Zeros: MakePZ([][2]float64{{0.5, 3 * math.Pi / 4}}),
		Poles: MakePZ([][2]float64{{0.5, math.Pi / 2}}),
	}.Make()
	if err != nil {
		t.Fatal(err)
	}
	want := []float64{1.00000000e+000, 7.07106781e-001, 5.55111512e-017, -1.76776695e-001,
		-2.47022385e-017, 4.41941738e-002, 8.88167230e-018, -1.10485435e-002,
		-2.89694624e-018, 2.76213586e-003, 8.93368603e-019, -6.90533966e-004,
		-2.65625161e-019, 1.72633492e-004, 7.69770430e-020, -4.31583729e-005,
		-2.18869489e-020, 1.07895932e-005, 6.13240927e-021, -2.69739830e-006,
		-1.69827033e-021, 6.74349576e-007, 4.65859584e-022, -1.68587394e-007,
		-1.26787897e-022, 4.21468485e-008, 3.42777243e-023, -1.05367121e-008,
		-9.21461862e-024, 2.63417803e-009, 2.46495154e-024, -6.58544508e-010,
		-6.56562106e-025, 1.64636127e-010, 1.74221582e-025, -4.11590317e-011,
		-4.60756593e-026, 1.02897579e-011, 1.21489808e-026, -2.57243948e-012,
		-3.19476168e-027, 6.43109871e-013, 8.38069543e-028, -1.60777468e-013,
		-2.19362166e-028, 4.01943669e-014, 5.73017367e-029, -1.00485917e-014,
		-1.49407330e-029, 2.51214793e-015, 3.88900794e-030, -6.28036983e-016,
		-1.01070816e-030, 1.57009246e-016, 2.62291083e-031, -3.92523115e-017,
		-6.79762817e-032, 9.81307787e-018, 1.75949481e-032, -2.45326947e-018,
		-4.54895646e-033, 6.13317367e-019, 1.17479397e-033, -1.53329342e-019,
		-3.03087208e-034, 3.83323354e-020, 7.81189805e-035, -9.58308385e-021,
		-2.01165398e-035, 2.39577096e-021, 5.17583361e-036, -5.98942741e-022,
		-1.33063307e-036, 1.49735685e-022, 3.41826933e-037, -3.74339213e-023,
		-8.77488999e-038, 9.35848033e-024, 2.25102666e-038, -2.33962008e-024,
		-5.77082707e-039, 5.84905020e-025, 1.47852187e-039, -1.46226255e-025,
		-3.78584243e-040, 3.65565638e-026, 9.68845048e-041, -9.13914094e-027,
		-2.47807372e-041, 2.28478524e-027, 6.33508704e-042, -5.71196309e-028,
		-1.61874745e-042, 1.42799077e-028, 4.13430783e-043, -3.56997693e-029,
		-1.05543676e-043, 8.92494233e-030, 2.69324142e-044, -2.23123558e-030,
		-6.86972732e-045, 5.57808895e-031, 1.75158777e-045, -1.39452224e-031,
		-4.46435929e-046, 3.48630560e-032, 1.13743729e-046, -8.71576399e-033,
		-2.89696188e-047, 2.17894100e-033, 7.37582636e-048, -5.44735250e-034,
		-1.87731200e-048, 1.36183812e-034, 4.77666855e-049, -3.40459531e-035,
		-1.21501427e-049, 8.51148827e-036, 3.08965351e-050, -2.12787207e-036,
		-7.85442836e-051, 5.31968017e-037, 1.99618074e-051, -1.32992004e-037,
		-5.07188596e-052, 3.32480011e-038, 1.28833002e-052, -8.31200027e-039,
		-3.27172137e-053, 2.07800007e-039, 8.30654423e-054, -5.19500017e-040,
		-2.10844626e-054, 1.29875004e-040, 5.35064115e-055, -3.24687510e-041,
		-1.35754166e-055, 8.11718776e-042, 3.44355760e-056, -2.02929694e-042,
		-8.73315260e-057, 5.07324235e-043, 2.21435280e-057, -1.26831059e-043,
		-5.61354362e-058, 3.17077647e-044, 1.42280131e-058, -7.92694117e-045,
		-3.60554180e-059, 1.98173529e-045, 9.13520078e-060, -4.95433823e-046,
		-2.31413677e-060, 1.23858456e-046, 5.86118335e-061, -3.09646140e-047,
		-1.48425620e-061, 7.74115349e-048, 3.75804138e-062, -1.93528837e-048,
		-9.51360569e-063, 4.83822093e-049, 2.40802698e-063, -1.20955523e-049,
		-6.09413135e-064, 3.02388808e-050, 1.54204881e-064, -7.55972020e-051,
		-3.90141197e-065, 1.88993005e-051, 9.86925475e-066, -4.72482513e-052,
		-2.49624490e-066, 1.18120628e-052, 6.31294027e-067, -2.95301570e-053,
		-1.59631707e-067, 7.38253926e-054, 4.03599770e-068, -1.84563482e-054,
		-1.02030068e-068, 4.61408704e-055, 2.57900483e-069, -1.15352176e-055,
		-6.51814492e-070, 2.88380440e-056, 1.64719444e-070, -7.20951100e-057,
		-4.16213162e-071, 1.80237775e-057, 1.05156929e-071, -4.50594437e-058,
		-2.65651416e-072, 1.12648609e-058, 6.71026279e-073, -2.81621523e-059,
		-1.69481004e-073, 7.04053808e-060, 4.28013597e-074, -1.76013452e-060,
		-1.08081171e-074, 4.40033630e-061, 2.72897356e-075, -1.10008408e-061,
		-6.88979462e-076, 2.75021019e-062, 1.73928883e-076, -6.87552547e-063,
		-4.39032254e-077, 1.71888137e-063, 1.10810575e-077, -4.29720342e-064,
		-2.79657715e-078, 1.07430086e-064, 7.05722483e-079, -2.68575214e-065,
		-1.78075170e-079, 6.71438034e-066, 4.49299296e-080, -1.67859509e-066,
		-1.13352667e-080, 4.19648772e-067, 2.85951275e-081, -1.04912193e-067,
		-7.21302208e-082, 2.62280482e-068, 1.81931557e-082, -6.55701205e-069,
		-4.58843904e-083, 1.63925301e-069, 1.15714729e-083, -4.09813253e-070,
		-2.91796205e-084, 1.02453313e-070, 7.35763968e-085, -2.56133283e-071,
		-1.85509356e-085, 6.40333208e-072, 4.67694300e-086, -1.60083302e-072,
		-1.17903803e-086, 4.00208255e-073, 2.97210075e-087, -1.00052064e-073,
		-7.49151610e-088, 2.50130160e-074, 1.88819508e-088, -6.25325399e-075,
		-4.75877784e-089, 1.56331350e-075, 1.19926699e-089, -3.90828374e-076,
		-3.02209882e-090, 9.77070936e-077, 7.61507539e-091, -2.44267734e-077,
		-1.91872593e-091, 6.10669335e-078, 4.83420754e-092, -1.52667334e-078,
		-1.21790006e-092, 3.81668334e-079, 3.06812060e-093, -9.54170836e-080,
		-7.72872762e-094, 2.38542709e-080, 1.94678843e-094, -5.96356772e-081,
		-4.90348741e-095, 1.49089193e-081, 1.23500093e-095, -3.72722983e-082,
		-3.11032503e-096, 9.31807457e-083, 7.83286932e-097, -2.32951864e-083,
		-1.97248152e-097, 5.82379660e-084, 4.96686427e-098, -1.45594915e-084,
		-1.25063118e-098, 3.63987288e-085, 3.14886575e-099, -9.09968220e-086,
		-7.92788387e-100, 2.27492055e-086, 1.99590084e-100, -5.68730137e-087,
		-5.02457677e-101, 1.42182534e-087, 1.26485036e-101, -3.55456336e-088,
		-3.18389133e-102, 8.88640839e-089, 8.01414188e-103, -2.22160210e-089,
		-2.01713886e-103, 5.55400525e-090, 5.07685562e-104, -1.38850131e-090,
		-1.27771602e-104, 3.47125328e-091, 3.21554536e-105, -8.67813320e-092,
		-8.09200163e-106, 2.16953330e-092, 2.03628497e-106, -5.42383325e-093,
		-5.12392382e-107, 1.35595831e-093, 1.28928380e-107, -3.38989578e-094,
		-3.24396664e-108, 8.47473945e-095, 8.16180940e-109, -2.11868486e-095,
		-2.05342555e-109, 5.29671216e-096, 5.16599689e-110, -1.32417804e-096,
		-1.29960748e-110, 3.31044510e-097, 3.26928932e-111, -8.27611274e-098,
		-8.22389987e-112, 2.06902819e-098, 2.06864411e-112, -5.17257047e-099,
		-5.20328314e-113, 1.29314262e-099, 1.30873900e-113, -3.23285654e-100,
		-3.29164304e-114, 8.08214135e-101, 8.27859643e-115, -2.02053534e-101,
		-2.08202132e-115, 5.05133834e-102, 5.23598382e-116, -1.26283459e-102,
		-1.31672859e-116, 3.15708647e-103, 3.31115305e-117, -7.89271616e-104,
		-8.32621157e-118, 1.97317904e-104, 2.09363513e-118, -4.93294760e-105,
		-5.26429341e-119, 1.23323690e-105, 1.32362475e-119, -3.08309225e-106,
		-3.32794037e-120, 7.70773063e-107, 8.36704717e-121, -1.92693266e-107,
		-2.10356085e-121, 4.81733164e-108, 5.28839978e-122, -1.20433291e-108,
		-1.32947436e-122, 3.01083228e-109, 3.34212192e-123, -7.52708069e-110,
		-8.40139489e-124, 1.88177017e-110, 2.11187124e-124, -4.70442543e-111,
		-5.30848440e-125, 1.17610636e-111, 1.33432267e-125, -2.94026590e-112,
		-3.35381062e-126, 7.35066474e-113, 8.42953640e-127, -1.83766618e-113,
		-2.11863656e-127, 4.59416546e-114, 5.32472255e-128, -1.14854137e-114,
		-1.33821342e-128, 2.87135341e-115, 3.36311553e-129, -7.17838353e-116,
		-8.45174375e-130, 1.79459588e-116, 2.12392467e-130, -4.48648971e-117,
		-5.33728350e-131, 1.12162243e-117, 1.34118883e-131, -2.80405607e-118,
		-3.37014197e-132, 7.01014017e-119, 8.46827965e-133, -1.75253504e-119,
		-2.12780109e-133, 4.38133761e-120, 5.34633069e-134, -1.09533440e-120,
		-1.34328966e-134, 2.73833600e-121, 3.37499163e-135, -6.84584001e-122,
		-8.47939774e-136, 1.71146000e-122, 2.13032911e-136, -4.27865001e-123,
		-5.35202194e-137, 1.06966250e-123, 1.34455528e-137, -2.67415625e-124,
		-3.37776268e-138, 6.68539063e-125, 8.48534292e-139, -1.67134766e-125,
		-2.13156978e-139, 4.17836915e-126, 5.35450959e-140, -1.04459229e-126,
		-1.34502368e-140, 2.61148072e-127, 3.37854991e-141, -6.52870179e-128,
		-8.48635153e-142, 1.63217545e-128, 2.13158208e-142, -4.08043862e-129,
		-5.35394067e-143, 1.02010965e-129, 1.34473154e-143, -2.55027414e-130,
		-3.37744477e-144, 6.37568534e-131, 8.48265174e-145, -1.59392134e-131,
		-2.13042289e-145, 3.98480334e-132, 5.35045710e-146, -9.96200835e-133,
		-1.34371425e-146, 2.49050209e-133, 3.37453554e-147, -6.22625522e-134,
		-8.47446367e-148, 1.55656380e-134, 2.12814712e-148, -3.89140951e-135,
		-5.34419582e-149, 9.72852378e-136, 1.34200596e-149, -2.43213094e-136,
		-3.36990740e-150, 6.08032736e-137, 8.46199977e-151, -1.52008184e-137,
		-2.12480776e-151, 3.80020460e-138, 5.33528894e-152, -9.50051150e-139,
		-1.33963962e-152, 2.37512788e-139, 3.36364251e-153, -5.93781969e-140,
		-8.44546495e-154, 1.48445492e-140, 2.12045590e-154, -3.71113731e-141,
		-5.32386392e-155, 9.27784326e-142, 1.33664702e-155, -2.31946082e-142,
		-3.35582015e-156, 5.79865204e-143, 8.42505688e-157, -1.44966301e-143,
		-2.11514085e-157, 3.62415752e-144, 5.31004368e-158, -9.06039381e-145,
		-1.33305881e-158, 2.26509845e-145, 3.34651675e-159, -5.66274613e-146,
		-8.40096621e-160, 1.41568653e-146, 2.10891013e-160, -3.53921633e-147,
		-5.29394678e-161, 8.84804083e-148, 1.32890456e-161, -2.21201021e-148,
		-3.33580605e-162, 5.53002552e-149, 8.37337676e-163, -1.38250638e-149,
		-2.10180960e-163, 3.45626595e-150, 5.27568753e-164, -8.64066487e-151,
		-1.32421276e-164, 2.16016622e-151, 3.32375911e-165, -5.40041555e-152,
		-8.34246578e-166, 1.35010389e-152, 2.09388345e-166, -3.37525972e-153,
		-5.25537612e-167, 8.43814929e-154, 1.31901091e-167, -2.10953732e-154,
		-3.31044446e-168, 5.27384331e-155, 8.30840412e-169, -1.31846083e-155,
		-2.08517428e-169, 3.29615207e-156, 5.23311880e-170, -8.24038017e-157,
		-1.31332548e-170, 2.06009504e-157, 3.29592814e-171, -5.15023760e-158,
		-8.27135645e-172, 1.28755940e-158, 2.07572314e-172, -3.21889850e-159,
		-5.20901792e-173, 8.04724626e-160, 1.30718200e-173, -2.01181156e-160,
		-3.28027379e-174, 5.02952891e-161, 8.23148145e-175, -1.25738223e-161,
		-2.06556961e-175, 3.14345557e-162, 5.18317213e-176, -7.85863892e-163,
		-1.30060506e-176, 1.96465973e-163, 3.26354273e-177, -4.91164933e-164,
		-8.18893199e-178, 1.22791233e-164, 2.05475179e-178, -3.06978083e-165,
		-5.15567647e-179, 7.67445207e-166, 1.29361836e-179, -1.91861302e-166,
		-3.24579403e-180, 4.79653255e-167, 8.14385535e-181, -1.19913314e-167,
		-2.04330641e-181, 2.99783284e-168, 5.12662246e-182, -7.49458210e-169,
		-1.28624472e-182, 1.87364553e-169, 3.22708458e-183, -4.68411381e-170,
		-8.09639337e-184, 1.17102845e-170, 2.03126882e-184, -2.92757113e-171,
		-5.09609826e-185, 7.31892784e-172, 1.27850612e-185, -1.82973196e-172,
		-3.20746917e-186, 4.57432990e-173, 8.04668261e-187, -1.14358247e-173,
		-2.01867308e-187, 2.85895619e-174, 5.06418875e-188, -7.14739046e-175,
		-1.27042370e-188, 1.78684762e-175, 3.18700054e-189, -4.46711904e-176,
		-7.99485456e-190, 1.11677976e-176, 2.00555194e-190, -2.79194940e-177,
		-5.03097562e-191, 6.97987350e-178, 1.26201785e-191, -1.74496838e-178,
		-3.16572946e-192, 4.36242094e-179, 7.94103578e-193, -1.09060523e-179,
		-1.99193698e-193, 2.72651309e-180, 4.99653752e-194, -6.81628271e-181,
		-1.25330815e-194, 1.70407068e-181, 3.14370480e-195, -4.26017670e-182,
		-7.88534805e-196, 1.06504417e-182, 1.97785853e-196, -2.66261044e-183,
		-4.96095010e-197, 6.65652609e-184, 1.24431347e-197, -1.66413152e-184,
		-3.12097355e-198, 4.16032881e-185, 7.82790854e-199, -1.04008220e-185,
		-1.96334580e-199, 2.60020550e-186, 4.92428617e-200, -6.50051376e-187,
		-1.23505196e-200, 1.62512844e-187, 3.09758094e-201, -4.06282110e-188,
		-7.76882995e-202, 1.01570527e-188, 1.94842689e-202, -2.53926319e-189,
		-4.88661573e-203, 6.34815797e-190, 1.22554106e-203, -1.58703949e-190,
		-3.07357046e-204, 3.96759873e-191, 7.70822068e-205, -9.91899682e-192,
		-1.93312880e-205, 2.47974921e-192, 4.84800609e-206, -6.19937302e-193,
		-1.21579754e-206, 1.54984325e-193, 3.04898391e-207, -3.87460813e-194,
		-7.64618492e-208, 9.68652034e-195, 1.91747751e-208, -2.42163008e-195,
		-4.80852199e-209, 6.05407521e-196, 1.20583755e-209, -1.51351880e-196,
		-3.02386150e-210, 3.78379701e-197, 7.58282283e-211, -9.45949252e-198,
		-1.90149798e-211, 2.36487313e-198, 4.76822561e-212, -5.91218282e-199,
		-1.19567657e-212, 1.47804571e-199, 2.99824185e-213, -3.69511426e-200,
		-7.51823067e-214, 9.23778566e-201, 1.88521418e-214, -2.30944641e-201,
		-4.72717673e-215, 5.77361604e-202, 1.18532950e-215, -1.44340401e-202,
		-2.97216206e-216, 3.60851002e-203, 7.45250089e-217, -9.02127506e-204,
		-1.86864916e-217, 2.25531876e-204, 4.68543275e-218, -5.63829691e-205,
		-1.17481065e-218, 1.40957423e-205, 2.94565777e-219, -3.52393557e-206,
		-7.38572231e-220, 8.80983892e-207, 1.85182505e-220, -2.20245973e-207,
		-4.64304880e-221, 5.50614933e-208, 1.16413374e-221, -1.37653733e-208,
		-2.91876322e-222, 3.44134333e-209, 7.31798020e-223, -8.60335832e-210,
		-1.83476309e-223, 2.15083958e-210, 4.60007781e-224, -5.37709895e-211,
		-1.15331198e-224, 1.34427474e-211, 2.89151125e-225, -3.36068685e-212,
		-7.24935640e-226, 8.40171711e-213, 1.81748367e-226, -2.10042928e-213,
		-4.55657059e-227, 5.25107320e-214, 1.14235800e-227, -1.31276830e-214,
		-2.86393339e-228, 3.28192075e-215, 7.17992945e-229, -8.20480187e-216,
		-1.80000635e-229, 2.05120047e-216, 4.51257587e-230, -5.12800117e-217,
		-1.13128396e-230, 1.28200029e-217, 2.83605989e-231, -3.20500073e-218,
		-7.10977470e-232, 8.01250182e-219, 1.78234992e-232, -2.00312546e-219,
		-4.46814040e-233, 5.00781364e-220, 1.12010150e-233, -1.25195341e-220,
		-2.80791976e-234, 3.12988353e-221, 7.03896440e-235, -7.82470881e-222,
		-1.76453235e-235, 1.95617720e-222, 4.42330901e-236, -4.89044301e-223,
		-1.10882179e-236, 1.22261075e-223, 2.77954080e-237, -3.05652688e-224,
		-6.96756782e-238, 7.64131720e-225, 1.74657091e-238, -1.91032930e-225,
		-4.37812467e-239, 4.77582325e-226, 1.09745552e-239, -1.19395581e-226,
		-2.75094966e-240, 2.98488953e-227, 6.89565133e-241, -7.46222383e-228,
		-1.72848213e-241, 1.86555596e-228, 4.33262856e-242, -4.66388989e-229,
		-1.08601295e-242, 1.16597247e-229, 2.72217189e-243, -2.91493118e-230,
		-6.82327854e-244, 7.28732796e-231, 1.71028184e-244, -1.82183199e-231,
		-4.28686009e-245, 4.55457997e-232, 1.07450390e-245, -1.13864499e-232,
		-2.69323194e-246, 2.84661248e-233, 6.75051032e-247, -7.11653121e-234,
		-1.69198520e-247, 1.77913280e-234, 4.24085704e-248, -4.44783201e-235,
		-1.06293777e-248, 1.11195800e-235, 2.66415321e-249, -2.77989500e-236,
		-6.67740497e-250, 6.94973751e-237, 1.67360673e-250, -1.73743438e-237,
		-4.19465554e-251, 4.34358594e-238, 1.05132356e-251, -1.08589649e-238,
		-2.63495811e-252, 2.71474121e-239, 6.60401827e-253, -6.78685304e-240,
		-1.65516032e-253, 1.69671326e-240, 4.14829016e-254, -4.24178315e-241,
		-1.03966988e-254, 1.06044579e-241, 2.60566807e-255, -2.65111447e-242,
		-6.53040356e-256, 6.62778617e-243, 1.63665924e-256, -1.65694654e-243,
		-4.10179397e-257, 4.14236635e-244, 1.02798496e-257, -1.03559159e-244,
		-2.57630357e-258, 2.58897897e-245, 6.45661185e-259, -6.47244743e-246,
		-1.61811619e-259, 1.61811186e-246, 4.05519856e-260, -4.04527964e-247,
		-1.01627666e-260, 1.01131991e-247, 2.54688420e-261, -2.52829978e-248,
		-6.38269186e-262, 6.32074944e-249, 1.59954331e-262, -1.58018736e-249,
		-4.00853413e-263, 3.95046840e-250, 1.00455250e-263, -9.87617100e-251,
		-2.51742865e-264, 2.46904275e-251, 6.30869016e-265, -6.17260688e-252,
		-1.58095217e-265, 1.54315172e-252, 3.96182951e-266, -3.85787930e-253,
		-9.92819646e-267, 9.64469825e-254, 2.48795479e-267, -2.41117456e-254,
		-6.23465116e-268, 6.02793640e-255, 1.56235384e-268, -1.50698410e-255,
		-3.91511221e-269, 3.76746025e-256, 9.81084956e-270, -9.41865063e-257,
		-2.45847965e-270, 2.35466266e-257, 6.16061728e-271, -5.88665664e-258,
		-1.54375886e-271, 1.47166416e-258, 3.86840849e-272, -3.67916040e-259,
		-9.69354957e-273, 9.19790101e-260, 2.42901948e-273, -2.29947525e-260,
		-6.08662893e-274, 5.74868813e-261, 1.52517729e-274, -1.43717203e-261,
		-3.82174336e-275, 3.59293008e-262, 9.57635876e-276, -8.98232520e-263,
		-2.39958978e-276, 2.24558130e-263, 6.01272467e-277, -5.61395325e-264,
		-1.50661872e-277, 1.40348831e-264, 3.77514069e-278, -3.50872078e-265,
		-9.45933645e-279, 8.77180196e-266, 2.37020529e-279, -2.19295049e-266,
		-5.93894118e-280, 5.48237622e-267, 1.48809228e-280, -1.37059406e-267,
		-3.72862317e-281, 3.42648514e-268, 9.34253910e-282, -8.56621285e-269,
		-2.34088007e-282, 2.14155321e-269, 5.86531340e-283, -5.35388303e-270,
		-1.46960666e-283, 1.33847076e-270, 3.68221241e-284, -3.34617689e-271,
		-9.22602046e-285, 8.36544223e-272, 2.31162747e-285, -2.09136056e-272,
		-5.79187457e-286, 5.22840140e-273, 1.45117011e-286, -1.30710035e-273,
		-3.63592897e-287, 3.26775087e-274, 9.10983162e-288, -8.16937718e-275,
		-2.28246021e-288, 2.04234430e-275, 5.71865627e-289, -5.10586074e-276,
		-1.43279050e-289, 1.27646518e-276, 3.58979236e-290, -3.19116296e-277,
		-8.99402113e-291, 7.97790740e-278, 2.25339034e-291, -1.99447685e-278,
		-5.64568850e-292, 4.98619213e-279, 1.41447529e-292, -1.24654803e-279,
		-3.54382113e-293, 3.11637008e-280, 8.87863508e-294, -7.79092520e-281,
		-2.22442934e-294, 1.94773130e-281, 5.57299975e-295, -4.86932825e-282,
		-1.39623154e-295, 1.21733206e-282, 3.49803286e-296, -3.04333016e-283,
		-8.76371718e-297, 7.60832539e-284, 2.19558805e-297, -1.90208135e-284,
		-5.50061702e-298, 4.75520337e-285, 1.37806598e-298, -1.18880084e-285,
		-3.45244425e-299, 2.97200211e-286, 8.64930888e-300, -7.43000526e-287,
		-2.16687679e-300, 1.85750132e-287, 5.42856588e-301, -4.64375329e-288,
		-1.35998495e-301, 1.16093832e-288, 3.40707107e-302, -2.90234581e-289,
		-8.53544942e-303, 7.25586451e-290, 2.13830529e-303, -1.81396613e-290,
		-5.35687056e-304, 4.53491532e-291, 1.34199448e-304, -1.13372883e-291,
		-3.36192828e-305, 2.83432208e-292, 8.42217591e-306, -7.08580519e-293,
		-2.10988278e-306, 1.77145130e-293, 5.28555396e-307, -4.42862824e-294,
		-1.32410024e-307, 1.10715706e-294, 3.31702999e-308, -2.76789265e-295,
		-8.30952343e-309, 6.91973163e-296, 2.08161797e-309, -1.72993291e-296,
		-5.21463771e-310, 4.32483227e-297, 1.30630762e-310, -1.08120807e-297,
		-3.27238955e-311, 2.70302017e-298, 8.19752510e-312, -6.75755042e-299,
		-2.05351908e-312, 1.68938761e-299, 5.14414222e-313, -4.22346901e-300,
		-1.28862168e-313, 1.05586725e-300, 3.22801953e-314, -2.63966813e-301}
	if got := real(lti.Y(complex(1, 0))); math.Abs((got-want[0])/want[0]) > 1e-8 {
		t.Fatalf("got %v for idx 0, wanted %v", got, want[0])
	}
	for i := 1; i < len(want); i++ {
		if got := real(lti.Y(complex(0, 0))); math.Abs((got-want[i])/want[i]) > 1e-8 {
			t.Fatalf("got %v for idx %v, wanted %v", got, i, want[i])
		}
	}
}

func TestFFTConformance(t *testing.T) {
	for _, tc := range []struct {
		conf LTIConf
	}{
		{
			conf: LTIConf{
				Gain:  0.5,
				Zeros: []complex128{},
				Poles: []complex128{0.8},
			},
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: MakePZ([][2]float64{{0.5, 3 * math.Pi / 4}}),
				Poles: MakePZ([][2]float64{{0.5, math.Pi / 2}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  2,
				Poles: MakePZ([][2]float64{{0.9, 9 * math.Pi / 10}, {0.4, 8 * math.Pi / 9}}),
				Zeros: MakePZ([][2]float64{{0.1, math.Pi / 10}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  1.5,
				Poles: MakePZ([][2]float64{{0.1, 3 * math.Pi / 10}, {0.2, 4 * math.Pi / 10}, {0.3, 5 * math.Pi / 10}}),
				Zeros: MakePZ([][2]float64{{0.3, 6 * math.Pi / 10}, {0.5, 8 * math.Pi / 10}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: nil,
				Poles: MakePZ([][2]float64{{0.001, 0.001}}),
			},
		},
	} {
		lti, err := tc.conf.Make()
		if err != nil {
			t.Fatal(err)
		}
		steps := 100
		x := make([]float64, steps)
		preload := len(tc.conf.Poles)
		for i := 0; i < preload; i++ {
			x[i] = 1.0
		}
		x[preload] = 1.0
		xCoeffs := fft.FFTReal(x)
		wPerStep := 2 * math.Pi / float64(steps)
		yCoeffs := make([]complex128, steps)
		for i := 0; i < steps; i++ {
			z := cmplx.Exp(complex(0, wPerStep*float64(i)))
			yCoeffs[i] = xCoeffs[i] * tc.conf.H(z)
		}
		yCmplx := fft.IFFT(yCoeffs)
		for i := 0; i < preload; i++ {
			lti.Preload(complex(x[i], 0), complex(real(yCmplx[i]), 0))
		}
		for i := preload; i < steps; i++ {
			want := real(lti.Y(complex(x[i], 0)))
			got := real(yCmplx[i])
			diff := math.Abs(want - got)
			if diff > 1e-13 {
				t.Errorf("got %v at step %v, wanted %v", got, i, want)
			}
		}
	}
}

func TestConvolve(t *testing.T) {
	for _, tc := range []struct {
		conf LTIConf
	}{
		{
			conf: LTIConf{
				Gain:  0.5,
				Zeros: []complex128{},
				Poles: []complex128{0.8},
			},
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: MakePZ([][2]float64{{0.5, 3 * math.Pi / 4}}),
				Poles: MakePZ([][2]float64{{0.5, math.Pi / 2}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  2,
				Poles: MakePZ([][2]float64{{0.9, 9 * math.Pi / 10}, {0.4, 8 * math.Pi / 9}}),
				Zeros: MakePZ([][2]float64{{0.1, math.Pi / 10}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  1.5,
				Poles: MakePZ([][2]float64{{0.1, 3 * math.Pi / 10}, {0.2, 4 * math.Pi / 10}, {0.3, 5 * math.Pi / 10}}),
				Zeros: MakePZ([][2]float64{{0.3, 6 * math.Pi / 10}, {0.5, 8 * math.Pi / 10}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: nil,
				Poles: MakePZ([][2]float64{{0.001, 0.001}}),
			},
		},
	} {
		lti, err := tc.conf.Make()
		if err != nil {
			t.Fatal(err)
		}

		x := make([]complex128, 1000)
		for i := range x {
			x[i] = complex(rand.Float64(), 0)
		}
		yGot := tc.conf.Convolve(x)
		for i := 0; i < len(tc.conf.Poles); i++ {
			lti.Preload(x[i], yGot[i])
		}
		for i := len(tc.conf.Poles); i < len(x); i++ {
			yWant := lti.Y(x[i])
			diff := math.Abs(real(yWant) - real(yGot[i]))
			if diff > 1e-11 {
				t.Errorf("convolve produced %v at %v, wanted %v", yGot[i], i, yWant)
			}
		}
	}
}

func BenchmarkStep(b *testing.B) {
	signal := make([]complex128, 1<<16+1)
	for i := range signal {
		signal[i] = complex(rand.Float64(), 0)
	}
	filter, err := LTIConf{
		Gain:  1.0,
		Poles: MakePZ([][2]float64{{0.8, 3 * math.Pi / 4}, {0.5, 4 * math.Pi / 5}}),
		Zeros: MakePZ([][2]float64{{0.3, 6 * math.Pi / 10}, {0.8, 3 * math.Pi / 10}}),
	}.Make()
	if err != nil {
		b.Fatal(err)
	}
	for _, pow := range []int{9, 10, 11, 12, 13, 14, 15, 16} {
		size := 1<<pow + 1
		b.Run(fmt.Sprintf("Length%v", size), func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				for n := 0; n < size; n++ {
					filter.Y(signal[n])
				}
			}
		})
	}
}

func BenchmarkConvolve(b *testing.B) {
	signal := make([]complex128, 1<<16+1)
	for i := range signal {
		signal[i] = complex(rand.Float64(), 0)
	}
	conf := LTIConf{
		Gain:  1.0,
		Poles: MakePZ([][2]float64{{0.8, 3 * math.Pi / 4}, {0.5, 4 * math.Pi / 5}}),
		Zeros: MakePZ([][2]float64{{0.3, 6 * math.Pi / 10}, {0.8, 3 * math.Pi / 10}}),
	}
	for _, pow := range []int{9, 10, 11, 12, 13, 14, 15, 16} {
		for _, size := range []int{1 << pow, 1<<pow + 1} {
			b.Run(fmt.Sprintf("Length%v", size), func(b *testing.B) {
				for i := 0; i < b.N; i++ {
					conf.Convolve(signal[:size])
				}
			})
		}
	}
}

func TestImpulseResponse(t *testing.T) {
	for tcIdx, tc := range []struct {
		conf LTIConf
	}{
		{
			conf: LTIConf{
				Gain:  0.5,
				Zeros: []complex128{},
				Poles: []complex128{0.8},
			},
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: MakePZ([][2]float64{{0.5, 3 * math.Pi / 4}}),
				Poles: MakePZ([][2]float64{{0.5, math.Pi / 2}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  2,
				Poles: MakePZ([][2]float64{{0.9, 9 * math.Pi / 10}, {0.4, 8 * math.Pi / 9}}),
				Zeros: MakePZ([][2]float64{{0.1, math.Pi / 10}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  1.5,
				Poles: MakePZ([][2]float64{{0.1, 3 * math.Pi / 10}, {0.2, 4 * math.Pi / 10}, {0.3, 5 * math.Pi / 10}}),
				Zeros: MakePZ([][2]float64{{0.3, 6 * math.Pi / 10}, {0.5, 8 * math.Pi / 10}}),
			},
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: nil,
				Poles: MakePZ([][2]float64{{0.001, 0.001}}),
			},
		},
	} {
		// Initialize filter.
		lti, err := tc.conf.Make()
		if err != nil {
			t.Fatal(err)
		}

		// Set up time constants.
		steps := 1000
		wPerStep := 2 * math.Pi / float64(steps)

		// Define x array.
		x := make([]float64, steps) // x[n]

		// Initialize x array with a step response.
		preload := len(tc.conf.Poles)
		for i := 0; i < preload; i++ {
			x[i] = 1.0
		}
		x[preload] = 1.0

		// Compute X and Y = X*H.
		xCoeffs := fft.FFTReal(x)                           // X(z) = FFT(x[n])
		expectedYCoeffs := make([]complex128, len(xCoeffs)) // Y(z)
		for i := range expectedYCoeffs {
			z := cmplx.Exp(complex(0, wPerStep*float64(i)))
			expectedYCoeffs[i] = xCoeffs[i] * tc.conf.H(z) // Y(z) = X(z) * H(z)
		}

		// Compute a correct y.
		yCmplx := fft.IFFT(expectedYCoeffs) // y[n] = IFFT(Y(z))

		// Populate the filter and a y array with the beginning of the correct values.
		y := make(signals.Float64Slice, steps)
		for i := 0; i < preload; i++ {
			y[i] = real(yCmplx[i])
			lti.Preload(complex(x[i], 0), complex(y[i], 0))
		}

		// Compute the rest of the y values using the filter.
		for i := preload; i < steps; i++ {
			y[i] = real(lti.Y(complex(x[i], 0)))
		}

		// Compute the FFT coeffs for the computed y values.
		computedYCoeffs := fft.FFTReal(y) // Y(z) = FFT(y[n])

		for i, computedCoeff := range computedYCoeffs {
			w := wPerStep * float64(i)
			expectedGain := cmplx.Abs(expectedYCoeffs[i])
			fftGain := cmplx.Abs(computedCoeff)
			diff := math.Abs(fftGain - expectedGain)
			if diff > 1e-11 {
				t.Errorf("tc %v got gain %v for w %v, wanted %v", tcIdx, fftGain, w, expectedGain)
			}
		}
	}
}

func TestDifferenceEquation(t *testing.T) {
	for _, tc := range []struct {
		conf           LTIConf
		wantedEquation string
		wantedNumbers  string
	}{
		{
			conf: LTIConf{
				Gain:  1,
				Poles: []complex128{3, 5},
				Zeros: []complex128{1, 2},
			},
			/*
				Y/X = (z - 1) * (z - 2) / ( (z - 3) * (z - 5) )
				Y/X = (1 - 1/z) * (1 - 2/z) / ( (1 - 3/z) * (1 - 5/z) )
				Y/X = (1 - 3/z + 2/z^2) / (1 - 8/z + 15/z^2)
				Y - 8Y/z + 15Y/z^2 = X - 3X/z + 2X/z^2
				Y = X - 3X/z + 2X/z^2 + 8Y/z - 15Y/z^2
				y[n] = x[n] - 3x[n-1] + 2x[n-2] + 8y[n-1] - 15y[n-2]
			*/
			wantedNumbers:  "(x[n] + x[n-1] * (-3+0i) + x[n-2] * (2+0i) - (y[n-1] * (-8+0i) + y[n-2] * (15+0i)))",
			wantedEquation: "(x[n] * g * qc0 + x[n-1] * g * qc1 + x[n-2] * g * qc2 - (y[n-1] * pc1 + y[n-2] * pc2)) / pc0",
		},
		{
			conf: LTIConf{
				Gain:  1,
				Poles: []complex128{1, 2, 3},
				Zeros: []complex128{5, 7},
			},
			/*
				Y/X = g * (z - q0) * (z - q1) / ( (z - p0) * (z - p1) * (z - p2) )
				Y/X = g * (1 - q0/z) * (1 - q1/z) * 1/z / ( (1 - p0/z) * (1 - p1/z) * (1 - p2/z) )
				qc0 = 1, qc1 = -12, qc2 = 35, pc0 = 1, pc1 = -6, pc2 = 11, pc3 = -6
				Y/X = g * (qc0 + qc1/z + qc2/z^2) * 1/z / ( (pc0 + pc1/z + pc2/z^2 + pc3/z^3) )
				Y * (pc0 + pc1/z + pc2/z^2 + pc3/z^3) = X * g * (qc0 + qc1/z + qc2/z^2) * 1/z
				Y * pc0 + Y/z * pc1 + Y/z^2 * pc2 +Y/z^3 * pc3 = X/z * g * qc0 + X/z^2 * g * qc1 + X/z^3 * qc2
				Y * pc0 = X/z * g * qc0 + X/z^2 * g * qc1 + X/z^3 * g * qc2 - (Y/z * pc1 + Y/z^2 * pc2 + Y/z^3 * pc3)
				Y = (X/z * g * qc0 + X/z^2 * g * qc1 + X/z^3 * g * qc2 - (Y/z * pc1 + Y/z^2 * pc2)) / pc0
				y[n] = (x[n-1] * g * qc0 + x[n-2] * g * qc1 + x[n-3] * g * qc2 - (y[n-1] * pc1 + y[n-2] * pc2 + y[n-3] * pc3)) / pc0
			*/
			wantedNumbers:  "(x[n-1] + x[n-2] * (-12+0i) + x[n-3] * (35+0i) - (y[n-1] * (-6+0i) + y[n-2] * (11+0i) + y[n-3] * (-6+0i)))",
			wantedEquation: "(x[n-1] * g * qc0 + x[n-2] * g * qc1 + x[n-3] * g * qc2 - (y[n-1] * pc1 + y[n-2] * pc2 + y[n-3] * pc3)) / pc0",
		},
		{
			conf: LTIConf{
				Gain:  0.5,
				Zeros: []complex128{-1},
				Poles: []complex128{1},
			},
			/*
				Y/X = 0.5 * (z+1) / (z-1)
				Y/X = 0.5 * (1+1/z) / (1-1/z)
				Y - Y/z = 0.5 * (X + X/z)
				Y = X * 0.5 + X/z * 0.5 + Y/z
				y[n] = x[n] * 0.5 + x[n-1] * 0.5 + y[n-1]
			*/
			wantedNumbers:  "(x[n] * (0.5+0i) + x[n-1] * (0.5+0i) - (y[n-1] * (-1+0i)))",
			wantedEquation: "(x[n] * g * qc0 + x[n-1] * g * qc1 - (y[n-1] * pc1)) / pc0",
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: nil,
				Poles: []complex128{0},
			},
			/*
				Y/X = 1/z
				Y = X/z
				y[n] = x[n-1]
			*/
			wantedNumbers:  "(x[n-1] - (0))",
			wantedEquation: "(x[n-1] * g * qc0 - (y[n-1] * pc1)) / pc0",
		},
		{
			conf: LTIConf{
				Gain:  1,
				Zeros: MakePZ([][2]float64{{0.5, 3 * math.Pi / 4}}),
				Poles: MakePZ([][2]float64{{0.5, math.Pi / 2}}),
			},
			/*
			 Y/X = (z - q1) * (z - q1.conj) / ( (z - p1) * (z - p1.conj))
			 (1 - q1/z) * (1 - q1.conj/z) / ( (1 - p1/z) * (1 - p1.conj/z))
			 1 - q1/z - q1.conj/z + q1 * q1.conj/z^2 / ( 1 - p1/z - p1.conj/z + p1 * p1.conj/z^2 )
			 Y - Yp1/z - Yp1.conj/z + Yp1p2.conj/z^2 = X - Xq1/z - Xq1.conj/z + Xq1q1.conj/z^2
			 Y = X - Xq1/z - Xq1.conj/z + Xq1q1.conj/z^2 + Yp1/z + Yp1.conj/z - Yp1p2.conj/z^2
			 q1 = 0.5 * exp(3 * math.Pi * i / 4)
			 p1 = 0.5 * exp(math.Pi * i / 2)
			*/
			wantedNumbers:  "(x[n] + x[n-1] * (0.7071067811865475+0i) + x[n-2] * (0.25+0i) - (y[n-1] * (-6.123233995736757e-17+0i) + y[n-2] * (0.25+0i)))",
			wantedEquation: "(x[n] * g * qc0 + x[n-1] * g * qc1 + x[n-2] * g * qc2 - (y[n-1] * pc1 + y[n-2] * pc2)) / pc0",
		},
	} {
		lti, err := tc.conf.Make()
		if err != nil {
			t.Fatal(err)
		}
		if got := lti.DifferenceEquation(true); got != tc.wantedNumbers {
			t.Errorf("\n%+v generated\n(%+v) which got\n%q but wanted\n%q", tc.conf, lti, got, tc.wantedNumbers)
		}
		if got := lti.DifferenceEquation(false); got != tc.wantedEquation {
			t.Errorf("\n%+v generated\n(%+v) which got\n%q but wanted\n%q", tc.conf, lti, got, tc.wantedEquation)
		}
	}
}

func TestHEquation(t *testing.T) {
	want := "g * (z - q0) * (z - q1) * (z - q2) / (z - p0) * (z - p1))"
	got := LTIConf{
		Gain:  0.0,
		Poles: []complex128{0, 0},
		Zeros: []complex128{0, 0, 0},
	}.HEquation(false)
	if got != want {
		t.Errorf("got %q, wanted %q", got, want)
	}
}

func TestH(t *testing.T) {
	for _, tc := range []struct {
		c      LTIConf
		z      complex128
		wanted float64
	}{
		{
			c: LTIConf{
				Gain:  2.0,
				Poles: nil,
				Zeros: []complex128{cmplx.Exp(complex(0, math.Pi/2))},
			},
			z:      cmplx.Exp(complex(0, math.Pi/2)),
			wanted: 0,
		},
		{
			c: LTIConf{
				Gain:  2.0,
				Poles: nil,
				Zeros: []complex128{cmplx.Exp(complex(0, math.Pi/2))},
			},
			z:      cmplx.Exp(complex(0, math.Pi/2+1)),
			wanted: 2.0 * cmplx.Abs(cmplx.Exp(complex(0, math.Pi/2+1))-cmplx.Exp(complex(0, math.Pi/2))),
		},
	} {
		if got := cmplx.Abs(tc.c.H(tc.z)); got != tc.wanted {
			t.Errorf("got %v, wanted %v", got, tc.wanted)
		}
	}
}

func TestSpecificCoeffs(t *testing.T) {
	got := coeffs([]complex128{
		(-0.05429768147702485 + 1.4172655611120915e-05i),
		(0.2917622403739163 + 0.7731812636894612i),
		(0.8768382244780407 - 0.31120458350060115i),
		(0.6598943546882394 - 0.46728573398560225i),
		(-0.05429768147702485 - 1.4172655611120915e-05i),
		(0.2917622403739163 - 0.7731812636894612i),
		(0.8768382244780407 + 0.31120458350060115i),
		(0.6598943546882394 + 0.46728573398560225i),
	})
	want := []complex128{
		(1 + 0i),
		(-3.548394276126343 + 5.551115123125783e-17i),
		(5.916185211745641 + 2.220446049250313e-16i),
		(-5.950823836910116 - 4.163336342344337e-16i),
		(3.8192506868443035 + 3.174543961037557e-16i),
		(-1.4222617112159746 + 7.632783294297951e-17i),
		(0.19423510795380383 - 1.3877787807814457e-17i),
		(0.03639413827830768 - 3.0357660829594124e-18i),
		(0.0011396243277688343 + 1.0842021724855044e-19i),
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf("got %#v, want %#v", got, want)
	}
	got = coeffs([]complex128{
		(0.635496172349615 + 0.14499945287904842i),
		(0.30987058966944614 - 0.8574194617385421i),
		(0.5721096307971768 - 2.2915816453724273e-05i),
		(0.635496172349615 - 0.14499945287904842i),
		(0.30987058966944614 + 0.8574194617385421i),
		(0.5721096307971768 + 2.2915816453724273e-05i),
	})
	want = []complex128{
		(1 + 0i),
		(-3.034952785632476 - 8.511325867190112e-17i),
		(4.534477583673548 + 5.551115123125783e-17i),
		(-4.27710735533178 - 1.1102230246251565e-16i),
		(2.5321779227822527 + 1.6653345369377348e-16i),
		(-0.8360534829672619 - 8.326672684688674e-17i),
		(0.11559106321853889 + 1.6276585114438635e-17i),
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf("got %#v, want %#v", got, want)
	}
}

func TestCoeffs(t *testing.T) {
	for _, tc := range []struct {
		num  int
		want [][][]int
	}{
		{
			num:  0,
			want: [][][]int{},
		},
		{
			num:  1,
			want: [][][]int{{{0}}},
		},
		{
			num:  3,
			want: [][][]int{{{0}, {1}, {2}}, {{0, 1}, {0, 2}, {1, 2}}, {{0, 1, 2}}},
		},
		{
			num:  4,
			want: [][][]int{{{0}, {1}, {2}, {3}}, {{0, 1}, {0, 2}, {0, 3}, {1, 2}, {1, 3}, {2, 3}}, {{0, 1, 2}, {0, 1, 3}, {0, 2, 3}, {1, 2, 3}}, {{0, 1, 2, 3}}},
		},
	} {
		pzs := make([]complex128, tc.num)
		for i := range pzs {
			pzs[i] = complex(rand.Float64(), rand.Float64())
		}
		coeffs := coeffs(pzs)
		if coeffs[0] != 1 {
			t.Errorf("got z^0 coeff %v, wanted 1", coeffs[0])
		}
		for i := 0; i < tc.num; i++ {
			want := complex128(0)
			for _, parts := range tc.want[i] {
				prod := complex128(1)
				for _, part := range parts {
					prod *= -pzs[part]
				}
				want += prod
			}
			got := coeffs[1+i]
			if got != want {
				t.Errorf("got coeff %v for z^-%v, wanted %v", got, i+1, want)
			}
		}
	}
}

func TestCombine(t *testing.T) {
	for _, tc := range []struct {
		length int
		num    int
		want   [][]int
	}{
		{
			length: 3,
			num:    0,
			want:   [][]int{},
		},
		{
			length: 3,
			num:    2,
			want:   [][]int{{0, 1}, {2, 1}, {2, 0}},
		},
		{
			length: 3,
			num:    3,
			want:   [][]int{{0, 1, 2}},
		},
		{
			length: 3,
			num:    1,
			want:   [][]int{{0}, {2}, {1}},
		},
		{
			length: 4,
			num:    2,
			want:   [][]int{{0, 1}, {0, 2}, {0, 3}, {2, 1}, {3, 1}, {2, 3}},
		},
		{
			length: 4,
			num:    3,
			want:   [][]int{{0, 1, 2}, {0, 1, 3}, {1, 2, 3}, {0, 2, 3}},
		},
	} {
		got := takeNumOfLength(tc.length, tc.num)
		if err := checkEq(got, tc.want); err != nil {
			t.Error(err)
		}
	}
}
